{"version":3,"sources":["utils/utils.js","utils/check-win.js","components/Button.js","components/Board.js","components/Scoreboard.js","components/InputStepper.js","components/Dropdown.js","App.js","serviceWorker.js","index.js"],"names":["clone","x","Array","isArray","WebStorage","key","val","localStorage","setItem","getItem","checkWin","squares","numRows","numCols","cell","numCellsInALineToWin","directions","name","xStep","yStep","i","length","winningSquares","check","lookAheadCol","lookAheadRow","Math","floor","found","thisCell","push","Button","props","className","ClassNames","hidden","disabled","onClick","undefined","value","Board","createSquare","includes","onClickSquare","bind","this","rows","row","columnMultiplier","j","Scoreboard","classNameX","score","X","O","classNameY","scoreX","scoreO","InputStepper","btnMinusDisabled","minValue","btnPlusDisabled","maxValue","classNamePlus","classNameMinus","Dropdown","onChange","selectedValue","values","map","item","id","App","webStorage","settingsPanel","setSettingsPanel","element","defaultThemeId","parseInt","load","defaultNumRows","defaultNumCols","defaultNumCellsInALineToWin","defaultGameState","history","fill","currentTurn","xIsNext","winner","draw","state","settings","inputs","dropdownThemeId","inputStepperRows","inputStepperCols","inputStepperCells","gui","loaded","settingsPanelHeight","gameOverTimerElapsed","themes","window","onload","setState","haveSettingsChanged","save","resetBoard","increment","min","max","scrollHeight","s","step","find","event","newThemeId","target","currentHistory","slice","every","concat","gameOverTimer","setInterval","clearInterval","status","gameWrapperClassName","getSelectedThemeClassName","settingsPanelStyle","height","handleClick_btnSettings","style","ref","handleClick_inputStepperRows","handleClick_inputStepperCols","handleClick_inputStepperCells","handleChange_dropdownTheme","handleClick_btnSaveSettings","handleClick_Square","undo","React","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5289ae19.chunk.js","sourcesContent":["// sometimes html entities in JSX are escaped, so we need to use unicode in a JavaScript string\r\nexport const NON_BREAKING_SPACE = '\\u00A0'; // &nbsp;\r\nexport const ZERO_WIDTH_SPACE = '\\u200B'; // &ZeroWidthSpace;\r\n\r\n/* Clone an array or object. Everything else returns itself. */\r\nexport function clone(x) {\r\n  if (x === null) {\r\n    return x;\r\n  } else if (Array.isArray(x)) {\r\n    return [...x];\r\n  } else if (typeof x === 'object'){\r\n    return {...x};\r\n  }\r\n  return x;\r\n}\r\n\r\n/* Check if something is a number */\r\nexport function isNumber(s) {\r\n  if (typeof s !== \"string\" && typeof s !== \"number\") return false; // only process numbers and strings\r\n  if (s === 0) return true;\r\n  return !isNaN(s) && !isNaN(parseFloat(s));\r\n}\r\n\r\n/* Wrapper for `localStorage` to check if the browser supports it */\r\nexport class WebStorage {\r\n\r\n  save (key, val) {\r\n    if (typeof localStorage !== 'undefined') {\r\n      localStorage.setItem(key, val);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /* Note: localStorage will always return a string\r\n  /* You may need to coerce the type after loading\r\n  */\r\n  load (key) {\r\n    if (typeof localStorage !== 'undefined') {\r\n      return localStorage.getItem(key);\r\n    }\r\n    return ''\r\n  }\r\n\r\n}\r\n","export default function checkWin(squares, numRows, numCols, cell, numCellsInALineToWin) {\r\n  // look in all directions around this cell to see if the player has won\r\n\r\n  if (squares[cell] === null) return [];\r\n\r\n  // define x/y steps for each direction we need to search\r\n  const directions = [\r\n    {name:'n',  xStep:0,  yStep:-1},\r\n    {name:'ne', xStep:1,  yStep:-1},\r\n    {name:'e',  xStep:1,  yStep:0},\r\n    {name:'se', xStep:1,  yStep:1},\r\n    {name:'s',  xStep:0,  yStep:1},\r\n    {name:'sw', xStep:-1, yStep:1},\r\n    {name:'w',  xStep:-1, yStep:0},\r\n    {name:'nw', xStep:-1, yStep:-1},\r\n  ];\r\n\r\n  // check in each direction for a match\r\n  for (let i=0; i<directions.length; i++) {\r\n\r\n    const winningSquares = check(\r\n      squares,\r\n      numRows,\r\n      numCols,\r\n      cell,\r\n      directions[i].xStep,\r\n      directions[i].yStep,\r\n      numCellsInALineToWin);\r\n\r\n    if (winningSquares.length === numCellsInALineToWin) return winningSquares; // match found\r\n\r\n  }\r\n\r\n  return []; // no matches found\r\n\r\n}\r\n\r\nfunction check(squares, numRows, numCols, cell, xStep, yStep, numCellsInALineToWin) {\r\n  // look in one direction, starting from cell, and staying within the bounds of the grid\r\n  // checking if every value is equal to the value in cell\r\n  // returns an array of the cells that match.\r\n  // ASSUMPTION: cell is correct, and fits inside the number of rows and cols\r\n\r\n  // check if only looking for one match lol\r\n  if (numCellsInALineToWin === 1) return [cell];\r\n\r\n  // check if we would extend beyond the grid on x-axis\r\n  const thisCol = cell % numCols; // index\r\n  const lookAheadCol = thisCol + (xStep * (numCellsInALineToWin - 1));\r\n  if (lookAheadCol > (numCols-1) || lookAheadCol < 0) return [];\r\n\r\n  // check if we would extend beyond the grid on y-axis\r\n  const thisRow = Math.floor(cell / numRows); // index\r\n  const lookAheadRow = thisRow + (yStep * (numCellsInALineToWin - 1));\r\n  if (lookAheadRow > (numRows-1) || lookAheadRow < 0) return [];\r\n\r\n  const found = [cell]; // array to store the matches\r\n  let thisCell = cell;\r\n  for (let i=0; i<(numCellsInALineToWin-1); i++) {\r\n\r\n    // calc index of next cell we need to check\r\n    thisCell += (xStep * 1) + (yStep * numCols);\r\n    if (squares[thisCell] === squares[cell]) {\r\n      found.push(thisCell);\r\n    } else {\r\n      return [];\r\n    }\r\n\r\n  }\r\n\r\n  return found;\r\n\r\n}\r\n","import React from 'react';\r\nimport ClassNames from 'classnames';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './Button.css';\r\n\r\nconst Button = (props) => {\r\n\r\n  const className = ClassNames('btn', props.className, {\r\n    'hidden': props.hidden,\r\n    'disabled': props.disabled,\r\n  });\r\n\r\n  return (\r\n    <button\r\n      className={className}\r\n      onClick={(!props.disabled) ? props.onClick : undefined}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n\r\n}\r\n\r\n// apply typechecking (dev mode only)\r\nButton.propTypes = {\r\n  className: PropTypes.string,\r\n  onClick: PropTypes.func,\r\n  value: PropTypes.string,\r\n  hidden: PropTypes.bool,\r\n  disabled: PropTypes.bool,\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport ClassNames from 'classnames';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Button from './Button.js';\r\nimport './Board.css';\r\n\r\nconst Board = (props) => {\r\n\r\n  const createSquare = function(i) {\r\n\r\n    let val = '';\r\n    if (props.squares[i] === 'X') {\r\n      val = 'value-x';\r\n    } else if (props.squares[i] === 'O') {\r\n      val = 'value-o';\r\n    }\r\n\r\n    const className = ClassNames('square', val, {\r\n      'winner': props.winningSquares.includes(i),\r\n    });\r\n\r\n    return (\r\n      <Button\r\n        key={i}\r\n        className={className}\r\n        onClick={props.onClickSquare.bind(this, i)}\r\n        disabled={props.winningSquares.length > 0 || props.squares[i] !== null}\r\n        value=''>\r\n      </Button>\r\n    );\r\n\r\n  }\r\n\r\n  const rows = [];\r\n\r\n  // draw dynamic number of rows and columns\r\n  for (let i=0; i<props.numRows; i++) {\r\n\r\n    const row = [];\r\n    const columnMultiplier = (i * props.numCols);\r\n\r\n    for (let j=0; j<props.numCols; j++) {\r\n      row.push(createSquare(columnMultiplier + j));\r\n    }\r\n\r\n    rows.push(\r\n      <div key={i} className='board-row'>{row}</div>\r\n    );\r\n\r\n  }\r\n\r\n  return (\r\n    <div className='board'><div>{rows}</div></div>\r\n  );\r\n\r\n}\r\n\r\n// apply typechecking (dev mode only)\r\nBoard.propTypes = {\r\n  className: PropTypes.string,\r\n  onClick: PropTypes.func,\r\n  numRows: PropTypes.number,\r\n  numCols: PropTypes.number,\r\n  winningSquares: PropTypes.array,\r\n  squares: PropTypes.array,\r\n};\r\n\r\nexport default Board;\r\n","import React from 'react';\r\nimport ClassNames from 'classnames';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './Scoreboard.css';\r\n\r\nconst Scoreboard = (props) => {\r\n\r\n  const classNameX = ClassNames('player', 'player-x', {\r\n    'winner': props.score.X > props.score.O,\r\n  });\r\n\r\n  const classNameY = ClassNames('player', 'player-o', {\r\n    'winner': props.score.X < props.score.O,\r\n  });\r\n\r\n  const scoreX = props.score.X > 0 ? props.score.X : '\\u00a0'; // blank space so div doesn't shrink\r\n  const scoreO = props.score.O > 0 ? props.score.O : '\\u00a0'; // blank space so div doesn't shrink\r\n\r\n  return (\r\n    <div className='score-board'>\r\n      <div className={classNameX}>\r\n        <div className='title'></div>\r\n        <div className='score'>{scoreX}</div>\r\n      </div>\r\n      <div className={classNameY}>\r\n        <div className='title'></div>\r\n        <div className='score'>{scoreO}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\n// apply typechecking (dev mode only)\r\nScoreboard.propTypes = {\r\n  score: PropTypes.object,\r\n};\r\n\r\nexport default Scoreboard;\r\n","import React from 'react';\r\nimport ClassNames from 'classnames';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './InputStepper.css';\r\n\r\nconst InputStepper = (props) => {\r\n\r\n  const btnMinusDisabled = props.value <= props.minValue;\r\n  const btnPlusDisabled = props.value >= props.maxValue;\r\n\r\n  const className = ClassNames('input-stepper', props.className);\r\n\r\n  const classNamePlus = ClassNames('btn plus', {\r\n    'disabled': btnPlusDisabled,\r\n  });\r\n\r\n  const classNameMinus = ClassNames('btn minus', {\r\n    'disabled': btnMinusDisabled,\r\n  });\r\n\r\n  return (\r\n    <div className={className}>\r\n      <button\r\n        className={classNameMinus}\r\n        onClick={!btnMinusDisabled ? props.onClick.bind(this, -1) : undefined}\r\n      >-</button>\r\n      <label>{props.value}</label>\r\n      <button\r\n        className={classNamePlus}\r\n        onClick={!btnPlusDisabled ? props.onClick.bind(this, 1) : undefined}\r\n      >+</button>\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\n// apply typechecking (dev mode only)\r\nInputStepper.propTypes = {\r\n  className: PropTypes.string,\r\n  onClick: PropTypes.func,\r\n  value: PropTypes.number,\r\n  minValue: PropTypes.number,\r\n  maxValue: PropTypes.number,\r\n};\r\n\r\nexport default InputStepper;\r\n","import React from 'react';\r\nimport ClassNames from 'classnames';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './Dropdown.css';\r\n\r\nconst Dropdown = (props) => {\r\n\r\n  const className = ClassNames('dropdown', props.className, {\r\n    'hidden': props.hidden,\r\n    'disabled': props.disabled,\r\n  });\r\n\r\n  return (\r\n    <select\r\n      className={className}\r\n      onChange={(!props.disabled) ? props.onChange : undefined}\r\n      value={props.selectedValue}>\r\n\r\n      {props.values.map((item) => (\r\n        <option value={item.id} key={item.id}>{item.name}</option>\r\n      ))}\r\n\r\n    </select>\r\n  );\r\n\r\n}\r\n\r\n// apply typechecking (dev mode only)\r\nDropdown.propTypes = {\r\n  className: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n  selectedValue: PropTypes.number,\r\n  values: PropTypes.array,\r\n  hidden: PropTypes.bool,\r\n  disabled: PropTypes.bool,\r\n};\r\n\r\nexport default Dropdown;\r\n","import React from 'react';\r\nimport ClassNames from 'classnames';\r\n\r\nimport {clone, ZERO_WIDTH_SPACE, WebStorage} from './utils/utils.js'\r\nimport checkWin from './utils/check-win.js'\r\nimport Board from './components/Board.js';\r\nimport Button from './components/Button.js';\r\nimport Scoreboard from './components/Scoreboard.js';\r\nimport InputStepper from './components/InputStepper.js';\r\nimport Dropdown from './components/Dropdown.js';\r\nimport './App.css';\r\nimport './themes/themes.css';\r\n\r\nexport default class App extends React.Component {\r\n\r\n  constructor(props) {\r\n\r\n    super(props);\r\n\r\n    this.webStorage = new WebStorage();\r\n\r\n    // get ref so we can lookup the scrollHeight to animate it\r\n    this.settingsPanel = null;\r\n    this.setSettingsPanel = element => {\r\n      this.settingsPanel = element;\r\n    };\r\n\r\n    const defaultThemeId = parseInt(this.webStorage.load('themeId')) || 0;\r\n    const defaultNumRows = parseInt(this.webStorage.load('numRows')) || 3;\r\n    const defaultNumCols = parseInt(this.webStorage.load('numCols')) || 3;\r\n    const defaultNumCellsInALineToWin = parseInt(this.webStorage.load('numCellsInALineToWin')) || 3;\r\n\r\n    // define the default state for a game separately so we can reset it when the game is over\r\n    const defaultGameState = {\r\n      history: [{\r\n        squares: Array(defaultNumRows * defaultNumCols).fill(null),\r\n      }],\r\n      currentTurn: 0,\r\n      xIsNext: true,\r\n      winner: null,\r\n      winningSquares: [],\r\n      draw: false,\r\n    };\r\n\r\n    this.state = {\r\n      ...defaultGameState,\r\n      defaultGameState,\r\n      settings: {\r\n        numRows: defaultNumRows,\r\n        numCols: defaultNumCols,\r\n        numCellsInALineToWin: defaultNumCellsInALineToWin,\r\n      },\r\n      score: {\r\n        X: 0,\r\n        O: 0,\r\n      },\r\n      inputs: {\r\n        dropdownThemeId: defaultThemeId,\r\n        inputStepperRows: defaultNumRows,\r\n        inputStepperCols: defaultNumCols,\r\n        inputStepperCells: defaultNumCellsInALineToWin,\r\n      },\r\n      gui: {\r\n        loaded: false, // set to true when window has loaded\r\n        settingsPanelHeight: 0,\r\n        gameOverTimerElapsed: 0,\r\n      },\r\n      themes: [\r\n        {\r\n          id: 0,\r\n          name: 'Banana',\r\n          className: 'theme-banana',\r\n        },\r\n        {\r\n          id: 1,\r\n          name: 'Eight Bit',\r\n          className: 'theme-bit',\r\n        },\r\n        {\r\n          id: 2,\r\n          name: 'Unicorn',\r\n          className: 'theme-unicorn',\r\n        },\r\n      ],\r\n    };\r\n\r\n    window.onload = () => {\r\n      const gui = clone(this.state.gui);\r\n      gui.loaded = true;\r\n      this.setState({gui});\r\n    };\r\n\r\n  }\r\n\r\n  handleClick_btnSaveSettings() {\r\n\r\n    // hide settings panel\r\n    const gui = clone(this.state.gui);\r\n    gui.settingsPanelHeight = 0;\r\n\r\n    // Save settings and reset game only if something has changed\r\n    // Otherwise the current game will be reset\r\n    if (this.haveSettingsChanged()) {\r\n\r\n      const settings = clone(this.state.settings);\r\n      settings.numRows = this.state.inputs.inputStepperRows;\r\n      settings.numCols = this.state.inputs.inputStepperCols;\r\n      settings.numCellsInALineToWin = this.state.inputs.inputStepperCells;\r\n\r\n      this.webStorage.save('numRows', settings.numRows);\r\n      this.webStorage.save('numCols', settings.numCols);\r\n      this.webStorage.save('numCellsInALineToWin', settings.numCellsInALineToWin);\r\n\r\n      // initalise new default game state\r\n      const defaultGameState = clone(this.state.defaultGameState);\r\n      defaultGameState.history = [{\r\n          squares: Array(settings.numRows * settings.numCols).fill(null),\r\n      }];\r\n\r\n      this.setState({settings, defaultGameState, gui},\r\n        () => { this.resetBoard(); }\r\n      );\r\n\r\n    } else {\r\n      this.setState({gui});\r\n    }\r\n\r\n  }\r\n\r\n  handleClick_inputStepperRows(increment) {\r\n    const inputs = clone(this.state.inputs);\r\n    inputs.inputStepperRows += increment;\r\n    inputs.inputStepperCells = Math.min(Math.max(inputs.inputStepperRows, inputs.inputStepperCols), inputs.inputStepperCells); // ensure cells doesn't exceed number of rows/columns\r\n    this.setState({inputs});\r\n  }\r\n\r\n  handleClick_inputStepperCols(increment) {\r\n    const inputs = clone(this.state.inputs);\r\n    inputs.inputStepperCols += increment;\r\n    inputs.inputStepperCells = Math.min(Math.max(inputs.inputStepperRows, inputs.inputStepperCols), inputs.inputStepperCells); // ensure cells doesn't exceed number of rows/columns\r\n    this.setState({inputs});\r\n  }\r\n\r\n  handleClick_inputStepperCells(increment) {\r\n    const inputs = clone(this.state.inputs);\r\n    inputs.inputStepperCells += increment;\r\n    this.setState({inputs});\r\n  }\r\n\r\n  handleClick_btnSettings() {\r\n    if (this.settingsPanel === null) return;\r\n\r\n    const gui = clone(this.state.gui);\r\n\r\n    // toggle show panel\r\n    if (gui.settingsPanelHeight === 0) {\r\n      gui.settingsPanelHeight = this.settingsPanel.scrollHeight;\r\n    } else {\r\n      gui.settingsPanelHeight = 0;\r\n    }\r\n\r\n    this.setState({gui});\r\n  }\r\n\r\n  haveSettingsChanged() {\r\n\r\n    const s = this.state\r\n\r\n    // detect if state will change\r\n    const changed = (s.inputs.inputStepperRows !== s.settings.numRows ||\r\n                     s.inputs.inputStepperCols !== s.settings.numCols ||\r\n                     s.inputs.inputStepperCells !== s.settings.numCellsInALineToWin);\r\n\r\n     // validate inputs (WIP)\r\n    const valid = true;\r\n\r\n    return (changed && valid);\r\n\r\n  }\r\n\r\n  resetBoard() {\r\n    this.setState( clone(this.state.defaultGameState) );\r\n  }\r\n\r\n  undo(step) {\r\n\r\n    const currentTurn = this.state.currentTurn - step;\r\n\r\n    if (currentTurn < 0) return; // can't go back any further\r\n\r\n    const score = clone(this.state.score);\r\n\r\n    if (this.state.winner) {\r\n      score[this.state.winner] -= 1;\r\n    }\r\n\r\n    this.setState({\r\n      score: score,\r\n      currentTurn: currentTurn,\r\n      xIsNext: (currentTurn % 2) === 0,\r\n      winner: null,\r\n      winningSquares: [],\r\n      draw: false,\r\n    });\r\n\r\n  }\r\n\r\n  getSelectedThemeClassName() {\r\n    const found = this.state.themes.find( item => item.id === this.state.inputs.dropdownThemeId );\r\n    if (found) {\r\n      return found.className;\r\n    } else {\r\n      return 'theme-default'; // shouldn't happen == dodgy default state\r\n    }\r\n  }\r\n\r\n  handleChange_dropdownTheme(event) {\r\n\r\n    const newThemeId = parseInt(event.target.value);\r\n\r\n    const inputs = clone(this.state.inputs);\r\n    inputs.dropdownThemeId = newThemeId;\r\n\r\n    this.webStorage.save('themeId', newThemeId);\r\n\r\n    this.setState({inputs}, () => {\r\n      // resize settings panel to fit the new theme\r\n      const gui = clone(this.state.gui);\r\n      gui.settingsPanelHeight = this.settingsPanel.scrollHeight;\r\n      this.setState({gui});\r\n    });\r\n\r\n  }\r\n\r\n  handleClick_Square(i) {\r\n\r\n    // get history from the beginning until currentTurn\r\n    const currentHistory = this.state.history.slice(0, this.state.currentTurn + 1);\r\n\r\n    const squares = clone(currentHistory[this.state.currentTurn].squares);\r\n    const gui = clone(this.state.gui);\r\n\r\n    // ignore a click if there is a winner or if this square has already been filled\r\n    if (this.state.winner || squares[i]) {\r\n      return;\r\n    }\r\n\r\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n\r\n    // check for a winner\r\n    let score = clone(this.state.score);\r\n    let winner = null;\r\n    let winningSquares;\r\n    for (let i=0; i<(squares.length-1); i++) {\r\n\r\n      winningSquares = checkWin(squares, this.state.settings.numRows, this.state.settings.numCols, i, this.state.settings.numCellsInALineToWin);\r\n\r\n      if (winningSquares.length === this.state.settings.numCellsInALineToWin) {\r\n        winner = squares[i];\r\n        score[winner] +=1;\r\n        break;\r\n      }\r\n\r\n    }\r\n\r\n    // check for draw\r\n    let draw = false;\r\n    if (!winner) {\r\n      draw = squares.every((i) => {return i != null});\r\n    }\r\n\r\n    const history = currentHistory.concat([{\r\n      squares: squares,\r\n    }])\r\n\r\n    const currentTurn = this.state.currentTurn + 1;\r\n\r\n    // start end game animation\r\n    if (winner || draw) {\r\n\r\n      gui.gameOverTimerElapsed = 0.200;\r\n\r\n      this.gameOverTimer = setInterval( () => {\r\n\r\n        if (this.state.gui.gameOverTimerElapsed >= 1000) {\r\n          clearInterval(this.gameOverTimer);\r\n          this.resetBoard();\r\n        } else {\r\n          const gui = clone(this.state.gui);\r\n          gui.gameOverTimerElapsed += 200;\r\n          this.setState({gui});\r\n        }\r\n\r\n      }, 200);\r\n    }\r\n\r\n    this.setState({\r\n      gui: gui,\r\n      history: history,\r\n      currentTurn: currentTurn,\r\n      xIsNext: !this.state.xIsNext,\r\n      winner: winner,\r\n      winningSquares: winningSquares,\r\n      draw: draw,\r\n      score: score,\r\n    });\r\n\r\n  }\r\n\r\n  render() {\r\n\r\n    let status;\r\n    if (this.state.draw) {\r\n      status = 'This game is a draw!';\r\n    } else if (this.state.winner){\r\n      status = 'Player ' + this.state.winner + ' has won!';\r\n    } else {\r\n      status = 'Player ' + (this.state.xIsNext ? 'X' : 'O') + '\\'s turn';\r\n    }\r\n\r\n    const gameWrapperClassName = ClassNames('game-wrapper', this.getSelectedThemeClassName(), {\r\n      'loaded': this.state.gui.loaded,\r\n    });\r\n\r\n    const settingsPanelStyle = {\r\n      height: this.state.gui.settingsPanelHeight,\r\n    };\r\n\r\n    return (\r\n      <div className={gameWrapperClassName}>\r\n        <div className='game'>\r\n\r\n          <div className='header'>\r\n\r\n            <h1>Tic Tac Toe</h1>\r\n\r\n            <div className='wrapper'>\r\n              <div></div>\r\n              <Scoreboard\r\n                score={this.state.score}\r\n              />\r\n\r\n              <Button\r\n                className='btn-show-settings'\r\n                onClick={this.handleClick_btnSettings.bind(this)}\r\n                value={ZERO_WIDTH_SPACE}\r\n              />\r\n\r\n            </div>\r\n\r\n            <div className='settings-panel' style={settingsPanelStyle} ref={this.setSettingsPanel}>\r\n              <div className='inner-wrapper'>\r\n                <label>Settings:</label>\r\n\r\n                <div className='wrapper'>\r\n\r\n                  <label>Rows:</label>\r\n                  <InputStepper\r\n                    className='input-stepper-rows'\r\n                    onClick={this.handleClick_inputStepperRows.bind(this)}\r\n                    maxValue={5}\r\n                    minValue={3}\r\n                    value={this.state.inputs.inputStepperRows}\r\n                  />\r\n\r\n                  <label>Columns:</label>\r\n                  <InputStepper\r\n                    className='input-stepper-columns'\r\n                    onClick={this.handleClick_inputStepperCols.bind(this)}\r\n                    maxValue={5} // any more than 5 and the layout will break on small screens\r\n                    minValue={3}\r\n                    value={this.state.inputs.inputStepperCols}\r\n                  />\r\n\r\n                  <label>Cells in a line to win:</label>\r\n                  <InputStepper\r\n                    className='input-stepper-cells'\r\n                    onClick={this.handleClick_inputStepperCells.bind(this)}\r\n                    maxValue={Math.max(this.state.inputs.inputStepperRows, this.state.inputs.inputStepperCols)}\r\n                    minValue={3}\r\n                    value={this.state.inputs.inputStepperCells}\r\n                  />\r\n\r\n                  <label>Theme:</label>\r\n                  <Dropdown\r\n                    className='dropdown-theme'\r\n                    onChange={this.handleChange_dropdownTheme.bind(this)}\r\n                    values={this.state.themes}\r\n                    selectedValue={this.state.inputs.dropdownThemeId}\r\n                  />\r\n\r\n                </div>\r\n\r\n                <Button\r\n                  className='btn-save-settings'\r\n                  onClick={this.handleClick_btnSaveSettings.bind(this)}\r\n                  value='Save'\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n          </div>\r\n\r\n          <Board\r\n            onClickSquare={this.handleClick_Square.bind(this)}\r\n            squares={this.state.history[this.state.currentTurn].squares}\r\n            winningSquares={this.state.winningSquares}\r\n            numRows={this.state.settings.numRows}\r\n            numCols={this.state.settings.numCols}\r\n          />\r\n\r\n          <div className='status'>{status}</div>\r\n\r\n          <Button\r\n            className='btn-undo'\r\n            onClick={this.undo.bind(this, 1)}\r\n            hidden={this.state.currentTurn === 0 || (this.state.winner !== null || this.state.draw)}\r\n            value='Undo'\r\n          />\r\n\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n  }\r\n\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}